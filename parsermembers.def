#define parser(p)                                                              \
  mpc_parser_t* p { mpc_new(#p) }
parser(character);
parser(integral);
parser(floatingpt);
parser(boolean);
parser(string);
parser(ident);
parser(identlist);
parser(overloadid);
parser(scoperes);
parser(identifier);
parser(alias);
parser(match);
parser(typeswitch);
parser(callable);
parser(funccall);
parser(capture);
parser(closure);
parser(initlist);
parser(listcomprehension);
parser(memberinitlist);
parser(initializer);
parser(value);
parser(newexpr);
parser(fnsizeof);
parser(fnalignof);
parser(fnappend);
parser(fnlen);
parser(fncast);
parser(expansion);
parser(expandop);
parser(deref);
parser(reference);
parser(factor);
parser(term);
parser(lexp);
parser(ternary);
parser(addrof);
parser(expression);
parser(exprlist);
parser(structmember);
parser(element);
parser(rangeable);
parser(range);
parser(letexpr);
parser(variable);
parser(receive);
parser(send);
parser(select);
parser(preop);
parser(postop);
parser(assign);
parser(letbind);
parser(ifstmt);
parser(forinexpr);
parser(forincrexpr);
parser(forexpr);
parser(forstmt);
parser(whilestmt);
parser(outstream);
parser(instream);
parser(opeq);
parser(declassign);
parser(returnstmt);
parser(coreturnstmt);
parser(deletestmt);
parser(yieldstmt);
parser(breakstmt);
parser(continuestmt);
parser(deferstmt);
parser(stmt);
parser(boolexpr);
parser(comparators);
parser(comparison);
parser(conditionals);
parser(condition);
parser(arraytype);
parser(fntype);
parser(chantype);
parser(atomictype);
parser(basictypes);
parser(pointertype);
parser(type);
parser(typeident);
parser(variadicarg);
parser(args);
parser(body);
parser(variadictype);
parser(typelist);
parser(tags);
parser(classdef);
parser(enumdef);
parser(enumeration);
parser(dataclass);
parser(function);
parser(structdef);
parser(structure);
parser(overloadableops);
parser(structop);
parser(structfunc);
parser(interfacedef);
parser(interface);
parser(externfunc);
parser(exports);
parser(moduleuse);
parser(moduledecl);
parser(compileropt);
parser(whack);
#undef parser